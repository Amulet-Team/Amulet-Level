import os
import unittest

from amulet.nbt import NamedTag, CompoundTag, StringTag

from amulet.core.chunk import ChunkDoesNotExist
from amulet.level.java.anvil import (
    AnvilRegion,
    RegionDoesNotExist,
    AnvilDimension,
    AnvilDimensionLayer,
)

from tests.data.worlds_src import java_vanilla_1_13
from tests.data.world_utils import WorldTemp

# fmt: off
Chunks = {(-14, -15), (-3, -15), (-12, 4), (-16, 15), (-12, 13), (8, -9), (0, -13), (11, -13), (8, 0), (0, -4), (11, -4), (8, 9), (-8, -8), (0, 5), (11, 5), (-8, 1), (0, 14), (11, 14), (-8, 10), (-11, -14), (12, -12), (4, -16), (-11, -5), (12, -3), (4, -7), (-11, 4), (4, 2), (1, -13), (3, 6), (16, -15), (3, 15), (14, 15), (-7, -8), (-5, 11), (-15, -12), (15, -11), (-15, -3), (15, -2), (15, -1), (-4, -6), (7, -6), (15, 7), (-12, -10), (-16, 1), (-4, 3), (7, 3), (15, 16), (-16, 10), (-4, 12), (7, 12), (-12, 8), (8, -14), (8, -5), (0, -9), (11, -9), (8, 4), (-8, -13), (0, 0), (11, 0), (-8, -4), (0, 9), (11, 9), (-8, 5), (-8, 14), (-11, -10), (12, -8), (4, -12), (3, 1), (14, 1), (3, 10), (14, 10), (-5, 6), (15, -16), (-5, 15), (15, -7), (-4, -11), (7, -11), (15, 2), (-12, -15), (-16, -4), (-4, -2), (-4, -1), (-12, -6), (7, -2), (-16, 5), (-4, 7), (7, -1), (-12, 3), (7, 7), (-16, 14), (-4, 16), (7, 16), (-12, 12), (8, -10), (0, -14), (11, -14), (0, -5), (11, -5), (-8, -9), (11, 4), (-8, 0), (10, 8), (-11, -15), (-9, 13), (2, 13), (3, -13), (3, -4), (14, -4), (-5, -8), (3, 5), (14, 5), (-5, 1), (3, 14), (14, 14), (-5, 10), (15, -12), (-4, -16), (7, -16), (15, -3), (-16, -9), (-4, -7), (7, -7), (-12, -11), (15, 6), (-16, 0), (-4, 2), (7, 2), (-12, -2), (-12, -1), (-16, 9), (7, 11), (-12, 7), (8, -15), (6, 15), (0, -10), (11, -10), (-8, -14), (-8, -5), (10, 3), (10, 12), (-9, 8), (2, 8), (3, -9), (14, -9), (-5, -13), (3, 0), (14, 0), (-5, -4), (3, 9), (14, 9), (-5, 5), (-5, 14), (15, -8), (-4, -12), (-16, -14), (7, -12), (-12, -16), (-16, -5), (-4, -3), (7, -3), (-12, -7), (-16, 4), (-12, 2), (6, 10), (-13, 6), (-2, 6), (-1, 6), (11, -15), (-13, 15), (-2, 15), (-1, 15), (-10, 11), (10, -11), (10, -2), (10, -1), (-9, -6), (2, -6), (10, 7), (-9, 3), (2, 3), (10, 16), (-9, 12), (2, 12), (3, -14), (14, -14), (3, -5), (14, -5), (-5, -9), (3, 4), (14, 4), (-5, 0), (-5, 9), (15, -13), (-6, 13), (-16, -10), (7, -8), (9, 11), (-12, -12), (6, -4), (6, 5), (-13, 1), (-2, 1), (-1, 1), (6, 14), (-13, 10), (-2, 10), (-1, 10), (-10, 6), (10, -16), (-10, 15), (10, -7), (-9, -11), (2, -11), (10, 2), (-9, -2), (-9, -1), (2, -2), (2, -1), (10, 11), (-9, 7), (2, 7), (-9, 16), (2, 16), (13, 13), (3, -10), (14, -10), (-5, -14), (-5, -5), (9, -3), (-6, 8), (5, 8), (-16, -15), (9, 6), (-14, 13), (-3, 13), (9, 15), (6, -9), (-13, -13), (-2, -13), (-1, -13), (6, 0), (-2, -4), (-1, -4), (-13, -4), (-10, -8), (6, 9), (-13, 5), (-2, 5), (-1, 5), (-10, 1), (-13, 14), (-2, 14), (-1, 14), (-10, 10), (10, -12), (-9, -16), (2, -16), (10, -3), (-9, -7), (2, -7), (10, 6), (-9, 2), (2, 2), (2, 11), (13, 8), (3, -15), (14, -15), (1, 15), (16, 13), (-5, -10), (-6, -6), (9, -8), (-6, 3), (5, 3), (9, 1), (-6, 12), (5, 12), (-14, 8), (-3, 8), (9, 10), (6, -14), (6, -5), (-13, -9), (-2, -9), (-1, -9), (-10, -13), (6, 4), (-13, 0), (-2, 0), (-1, 0), (-10, -4), (6, 13), (-13, 9), (-2, 9), (-1, 9), (-10, 5), (-10, 14), (10, -8), (-9, -12), (2, -12), (-9, -3), (2, -3), (13, -6), (13, 3), (1, 10), (13, 12), (-7, 6), (16, 8), (-7, 15), (-15, 11), (-6, -11), (5, -11), (9, -13), (-6, -2), (-6, -1), (5, -2), (-14, -6), (-3, -6), (-6, 7), (5, -1), (9, -4), (-14, 3), (-3, 3), (-6, 16), (5, 7), (5, 16), (-14, 12), (-3, 12), (9, 5), (6, -10), (9, 14), (-13, -14), (-2, -14), (-1, -14), (-13, -5), (-2, -5), (-1, -5), (-10, -9), (-13, 4), (-2, 4), (-1, 4), (-10, 0), (-10, 9), (10, -13), (12, 6), (-11, 13), (12, 15), (2, -8), (4, 11), (13, -11), (1, -4), (13, -2), (13, -1), (16, -6), (1, 5), (13, 7), (-7, 1), (16, 3), (1, 14), (13, 16), (-7, 10), (16, 12), (-15, 6), (-6, -16), (5, -16), (-15, 15), (-6, -7), (5, -7), (-14, -11), (-3, -11), (-6, 2), (9, -9), (5, 2), (-14, -2), (-14, -1), (-3, -2), (-3, -1), (-6, 11), (-14, 7), (-3, 7), (5, 11), (6, -15), (9, 0), (-14, 16), (-3, 16), (9, 9), (6, -6), (8, 13), (-13, -10), (-2, -10), (-1, -10), (-10, -14), (-10, -5), (-10, 4), (12, 1), (4, -3), (-11, 8), (12, 10), (4, 6), (13, -16), (4, 15), (1, -9), (13, -7), (-7, -13), (16, -11), (1, 0), (13, 2), (-7, -4), (16, -2), (16, -1), (-15, -8), (1, 9), (-7, 5), (13, 11), (16, 7), (-15, 1), (-7, 14), (16, 16), (-15, 10), (-6, -12), (5, -12), (-14, -16), (-3, -16), (-6, -3), (5, -3), (9, -14), (-14, -7), (-3, -7), (-6, 6), (9, -5), (5, 6), (-14, 2), (-3, 2), (-14, 11), (-3, 11), (8, 8), (-13, -15), (-2, -15), (-1, -15), (0, 4), (0, 13), (11, 13), (-10, -10), (-8, 9), (12, -13), (-11, -6), (12, -4), (4, -8), (-11, 3), (12, 5), (4, 1), (-11, 12), (12, 14), (4, 10), (1, -14), (13, -12), (16, -16), (1, -5), (13, -3), (-7, -9), (16, -7), (1, 4), (-15, -13), (-7, 0), (16, 2), (1, 13), (-15, -4), (-7, 9), (-15, 5), (-15, 14), (15, 15), (-6, -8), (-4, 11), (5, -8), (-14, -12), (-3, -12), (9, -10), (-14, -3), (-3, -3), (-12, 16), (8, -6), (8, 3), (8, 12), (0, 8), (11, 8), (-8, 4), (-8, 13), (-11, -11), (12, -9), (4, -13), (-11, -2), (-11, -1), (12, 0), (4, -4), (-11, 7), (12, 9), (4, 5), (-11, 16), (4, 14), (1, -10), (13, -8), (-7, -14), (16, -12), (-7, -5), (16, -3), (-15, -9), (-7, 4), (-15, 0), (15, 1), (-15, 9), (15, 10), (-6, -13), (-4, 6), (5, -13), (7, 6), (-16, 13), (-4, 15), (-3, -8), (-12, 11), (7, 15), (8, -11), (0, -15), (8, -2), (8, -1), (0, -6), (11, -6), (8, 7), (-8, -10), (0, 3), (11, 3), (8, 16), (0, 12), (11, 12), (-8, 8), (-11, -16), (12, -14), (-11, -7), (12, -5), (4, -9), (-11, 2), (12, 4), (4, 0), (-11, 11), (4, 9), (1, -15), (1, -6), (3, 13), (14, 13), (-7, -10), (-15, -14), (-15, -5), (15, -4), (-4, -8), (-15, 4), (15, 5), (-4, 1), (7, 1), (15, 14), (-12, -3), (-16, 8), (-4, 10), (7, 10), (-12, 6), (8, -16), (-12, 15), (8, -7), (0, -11), (11, -11), (8, 2), (-8, -15), (0, -2), (0, -1), (11, -2), (-8, -6), (11, -1), (0, 7), (8, 11), (11, 7), (-8, 3), (0, 16), (11, 16), (-8, 12), (-11, -12), (12, -10), (4, -14), (-11, -3), (4, -5), (-11, 6), (3, 8), (14, 8), (-7, -15), (-5, 4), (-5, 13), (-15, -10), (15, -9), (-4, -13), (7, -13), (15, 0), (-16, -6), (-4, -4), (7, -4), (-12, -8), (15, 9), (-16, 3), (-4, 5), (7, 5), (-12, 1), (-16, 12), (-4, 14), (7, 14), (-12, 10), (8, -12), (0, -16), (11, -16), (8, -3), (0, -7), (11, -7), (-8, -11), (0, 2), (11, 2), (-8, -2), (-8, -1), (-8, 7), (12, -15), (10, 15), (-11, -8), (-9, 11), (4, -10), (3, -6), (14, -6), (3, 3), (14, 3), (3, 12), (14, 12), (-5, 8), (15, -14), (15, -5), (-4, -9), (-16, -11), (7, -9), (-12, -13), (15, 4), (-16, -2), (-16, -1), (-4, 0), (-12, -4), (7, 0), (-16, 7), (-4, 9), (7, 9), (-12, 5), (15, 13), (-16, 16), (-12, 14), (8, -8), (0, -12), (11, -12), (-8, -16), (0, -3), (11, -3), (-8, -7), (-8, 2), (10, 1), (10, 10), (-11, -13), (-9, 6), (2, 6), (7, 8), (-9, 15), (2, 15), (3, -11), (14, -11), (-5, -15), (3, -2), (3, -1), (14, -2), (-5, -6), (14, -1), (3, 7), (14, 7), (-5, 3), (3, 16), (14, 16), (-5, 12), (15, -10), (-16, -16), (-4, -14), (7, -14), (-16, -7), (-4, -5), (7, -5), (-12, -9), (-16, 2), (-4, 4), (7, 4), (-12, 0), (-16, 11), (-12, 9), (6, 8), (-13, 13), (-2, 13), (-1, 13), (-8, -12), (10, -4), (-9, -8), (10, 5), (-9, 1), (2, 1), (10, 14), (-9, 10), (2, 10), (3, -16), (14, -16), (3, -7), (14, -7), (-5, -11), (3, 2), (14, 2), (-5, -2), (-5, -1), (3, 11), (14, 11), (-5, 7), (15, -15), (-5, 16), (15, -6), (-16, -12), (-4, -10), (7, -10), (-12, -14), (-16, -3), (-12, -5), (-16, 6), (6, 3), (6, 12), (-13, 8), (-2, 8), (-1, 8), (-10, 13), (10, -9), (-9, -13), (2, -13), (10, 0), (-9, -4), (2, -4), (10, 9), (-9, 5), (2, 5), (-9, 14), (2, 14), (3, -12), (14, -12), (-5, -16), (3, -3), (14, -3), (-5, -7), (14, 6), (-5, 2), (-4, -15), (7, -15), (9, 4), (-6, 15), (5, 15), (-16, -8), (9, 13), (6, -11), (6, -2), (6, -1), (-13, -6), (-2, -6), (-1, -6), (6, 7), (-13, 3), (-2, 3), (-1, 3), (6, 16), (-13, 12), (-2, 12), (-1, 12), (-10, 8), (10, -14), (10, -5), (-9, -9), (2, -9), (10, 4), (-9, 0), (2, 0), (10, 13), (-9, 9), (2, 9), (13, 6), (13, 15), (3, -8), (14, -8), (16, 11), (-5, -12), (-5, -3), (-6, 1), (5, 1), (-6, 10), (5, 10), (-16, -13), (-14, 6), (-3, 6), (9, 8), (6, -16), (-14, 15), (-3, 15), (6, -7), (-13, -11), (-2, -11), (-1, -11), (-10, -15), (6, 2), (-13, -2), (-13, -1), (-2, -2), (-10, -6), (-2, -1), (-1, -2), (-1, -1), (-13, 7), (-10, 3), (-2, 7), (-13, 16), (-2, 16), (-1, 7), (-10, 12), (-1, 16), (10, -10), (6, 11), (-9, -14), (2, -14), (-9, -5), (2, -5), (-9, 4), (2, 4), (13, 1), (1, 8), (13, 10), (14, -13), (16, 6), (-7, 13), (16, 15), (9, -15), (-6, -4), (5, -4), (-14, -8), (9, -6), (-6, 5), (5, 5), (-14, 1), (-3, 1), (-6, 14), (5, 14), (9, 3), (-14, 10), (-3, 10), (9, 12), (6, -12), (-13, -16), (-2, -16), (-1, -16), (6, -3), (-13, -7), (-2, -7), (-1, -7), (-10, -11), (6, 6), (-13, 2), (-2, 2), (-1, 2), (-10, -2), (-10, -1), (-13, 11), (-2, 11), (-1, 11), (-10, 7), (10, -15), (-10, 16), (10, -6), (12, 13), (-9, -10), (2, -10), (13, -13), (13, -4), (16, -8), (1, 3), (13, 5), (16, 1), (1, 12), (13, 14), (-7, 8), (16, 10), (-15, 13), (-6, -9), (5, -9), (-14, -13), (-3, -13), (-6, 0), (9, -11), (5, 0), (-14, -4), (-3, -4), (-6, 9), (9, -2), (9, -1), (-14, 5), (-3, 5), (5, 9), (9, 7), (-14, 14), (-3, 14), (9, 16), (6, -8), (-1, -12), (-13, -12), (-2, -12), (-10, -16), (6, 1), (-13, -3), (-2, -3), (-1, -3), (-10, -7), (-10, 2), (12, 8), (-9, -15), (2, -15), (4, 4), (-11, 15), (4, 13), (1, -11), (13, -9), (16, -13), (1, -2), (1, -1), (13, 0), (-7, -6), (16, -4), (1, 7), (13, 9), (15, 11), (-7, 3), (16, 5), (1, 16), (-7, 12), (16, 14), (-15, 8), (-6, -14), (5, -14), (9, -16), (-6, -5), (5, -5), (-14, -9), (-3, -9), (-6, 4), (9, -7), (5, 4), (-14, 0), (-3, 0), (5, 13), (9, 2), (-14, 9), (-3, 9), (6, -13), (8, 6), (8, 15), (-13, -8), (-2, -8), (-1, -8), (-10, -12), (0, 11), (11, 11), (-10, -3), (-8, 16), (12, -6), (-11, 1), (12, 3), (-11, 10), (12, 12), (4, 8), (1, -16), (13, -14), (1, -7), (13, -5), (-7, -11), (16, -9), (1, 2), (-15, -15), (13, 4), (-7, -2), (-7, -1), (1, 11), (-15, -6), (16, 0), (-7, 7), (16, 9), (-15, 3), (-7, 16), (-15, 12), (-6, -10), (5, -10), (-14, -14), (-3, -14), (9, -12), (-14, -5), (-3, -5), (-14, 4), (-3, 4), (8, 1), (8, 10), (0, 6), (11, 6), (0, 15), (11, 15), (-8, 11), (12, -11), (4, -15), (-11, -4), (12, -2), (12, -1), (4, -6), (-11, 5), (12, 7), (4, 3), (-11, 14), (12, 16), (4, 12), (1, -12), (13, -10), (-7, -16), (16, -14), (1, -3), (-7, -7), (16, -5), (1, 6), (-15, -11), (-7, 2), (16, 4), (-15, -2), (-15, -1), (-7, 11), (-15, 7), (15, 8), (-6, -15), (5, -15), (-15, 16), (5, -6), (-4, 13), (7, 13), (-14, -10), (-3, -10), (8, -13), (8, -4), (0, -8), (11, -8), (8, 5), (0, 1), (11, 1), (8, 14), (-8, -3), (0, 10), (11, 10), (-8, 6), (12, -16), (-8, 15), (-11, -9), (12, -7), (4, -11), (-11, 0), (12, 2), (4, -2), (4, -1), (-11, 9), (12, 11), (4, 7), (13, -15), (4, 16), (1, -8), (-7, -12), (16, -10), (1, 1), (-15, -16), (-7, -3), (-15, -7), (-15, 2), (15, 3), (15, 12), (-4, 8)}
# fmt: on


class AnvilDimensionLayerTestCase(unittest.TestCase):
    def test_methods(self) -> None:
        with WorldTemp(java_vanilla_1_13) as world:
            directory = os.path.join(world.temp_path, "region")
            layer = AnvilDimensionLayer(directory)

            self.assertEqual(directory, layer.directory)
            self.assertFalse(layer.mcc)

            # Region iterator
            self.assertEqual(
                {(-1, -1), (-1, 0), (0, -1), (0, 0)}, set(layer.all_region_coords())
            )
            # Has region
            self.assertTrue(layer.has_region(0, 0))
            self.assertTrue(layer.has_region(-1, -1))
            self.assertFalse(layer.has_region(2, 2))
            # Get region
            self.assertIsInstance(layer.get_region(0, 0), AnvilRegion)
            # Check that accessing a non-existent region raises an error.
            with self.assertRaises(RegionDoesNotExist):
                layer.get_region(2, 2)
            # Test creating the region
            layer.get_region(2, 2, create=True)
            # We haven't written anything so this should still be false
            self.assertFalse(layer.has_region(2, 2))

            # Chunk iterator
            self.assertEqual(Chunks, set(layer.all_chunk_coords()))

            # Has chunk
            self.assertTrue(layer.has_chunk(0, 0))
            self.assertTrue(layer.has_chunk(-1, -1))
            self.assertFalse(layer.has_chunk(20, 0))
            self.assertFalse(layer.has_chunk(50, 50))

            # Get chunk
            self.assertIsInstance(layer.get_chunk_data(0, 0), NamedTag)
            with self.assertRaises(ChunkDoesNotExist):
                layer.get_chunk_data(20, 0)
            with self.assertRaises(ChunkDoesNotExist):
                layer.get_chunk_data(50, 50)

            # Set chunk
            value = NamedTag(CompoundTag(test=StringTag("test")), "test")
            layer.set_chunk_data(50, 50, value)
            self.assertTrue(layer.has_chunk(50, 50))
            self.assertEqual(value, layer.get_chunk_data(50, 50))
            self.assertEqual(
                {(0, 0), (0, -1), (-1, 0), (-1, -1), (1, 1)},
                set(layer.all_region_coords()),
            )

            # Delete chunk
            layer.delete_chunk(50, 50)
            self.assertFalse(layer.has_chunk(50, 50))
            with self.assertRaises(ChunkDoesNotExist):
                layer.get_chunk_data(50, 50)
            self.assertEqual(
                {(0, 0), (0, -1), (-1, 0), (-1, -1), (1, 1)},
                set(layer.all_region_coords()),
            )

            # Compact
            chunks = {
                (cx, cz): layer.get_chunk_data(cx, cz)
                for cx, cz in layer.all_chunk_coords()
            }
            self.assertEqual(1089, len(chunks))
            region_sizes = {
                (rx, rz): os.path.getsize(layer.get_region(rx, rz).path)
                for rx, rz in layer.all_region_coords()
            }
            layer.compact()
            self.assertEqual(
                chunks,
                {
                    (cx, cz): layer.get_chunk_data(cx, cz)
                    for cx, cz in layer.all_chunk_coords()
                },
            )
            self.assertFalse(layer.has_region(1, 1))
            for (rx, rz), size in region_sizes.items():
                if (rx, rz) == (1, 1):
                    continue
                self.assertLessEqual(
                    os.path.getsize(layer.get_region(rx, rz).path), size
                )

            # delete layer to free file handles
            del layer


class AnvilDimensionTestCase(unittest.TestCase):
    def test_methods(self) -> None:
        with WorldTemp(java_vanilla_1_13) as world:
            dimension = AnvilDimension(world.temp_path, ["region"])

            # Properties
            self.assertEqual(world.temp_path, dimension.directory)
            self.assertFalse(dimension.mcc)
            self.assertEqual(["region"], dimension.layer_names)

            # Layers
            self.assertTrue(dimension.has_layer("region"))
            self.assertFalse(dimension.has_layer("other"))
            region_layer = dimension.get_layer("region")
            self.assertIsInstance(region_layer, AnvilDimensionLayer)
            with self.assertRaises(ValueError):
                dimension.get_layer("other")
            self.assertEqual(
                os.path.join(world.temp_path, "region"), region_layer.directory
            )

            # Chunk coords
            self.assertEqual(Chunks, set(dimension.all_chunk_coords()))

            # Has chunk
            self.assertTrue(dimension.has_chunk(0, 0))
            self.assertFalse(dimension.has_chunk(50, 50))

            # Get chunk
            chunk_data = dimension.get_chunk_data(0, 0)
            self.assertIsInstance(chunk_data, dict)
            self.assertEqual(1, len(chunk_data))
            for k, v in chunk_data.items():
                self.assertIsInstance(k, str)
                self.assertIsInstance(v, NamedTag)
            with self.assertRaises(ChunkDoesNotExist):
                dimension.get_chunk_data(50, 50)

            # Set chunk
            value = {"region": NamedTag(CompoundTag(test=StringTag("test")), "test")}
            dimension.set_chunk_data(50, 50, value.items())
            self.assertTrue(value, dimension.get_chunk_data(50, 50))
            self.assertTrue(os.path.isfile(region_layer.get_region(1, 1).path))

            # Delete chunk
            dimension.delete_chunk(50, 50)
            with self.assertRaises(ChunkDoesNotExist):
                dimension.get_chunk_data(50, 50)
            self.assertTrue(region_layer.has_region(1, 1))

            # Compact
            chunks = {
                (cx, cz): dimension.get_chunk_data(cx, cz)
                for cx, cz in dimension.all_chunk_coords()
            }
            self.assertEqual(1089, len(chunks))
            region_sizes = {
                (rx, rz): os.path.getsize(region_layer.get_region(rx, rz).path)
                for rx, rz in region_layer.all_region_coords()
            }
            dimension.compact()
            self.assertEqual(
                chunks,
                {
                    (cx, cz): dimension.get_chunk_data(cx, cz)
                    for cx, cz in dimension.all_chunk_coords()
                },
            )
            self.assertFalse(region_layer.has_region(1, 1))
            for (rx, rz), size in region_sizes.items():
                if (rx, rz) == (1, 1):
                    continue
                self.assertLessEqual(
                    os.path.getsize(region_layer.get_region(rx, rz).path), size
                )

            del region_layer
            del dimension


if __name__ == "__main__":
    unittest.main()
